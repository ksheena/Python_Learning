# Regex Expression 

 - Pattern to match multiple words 
 - https://rubular.com/



import re   # default module for regex


Syntax:
re.search(pattern, text)
re.match(pattern, text)
re.findditer(pattern, text)
re.findall(pattern, text)


-------------------------------------------------------------------
#Find All

import re

text = "This is @  python2 and it is easy to learn "
my_pattren = "i[st]"

print(re.findall(my_pattren, text))
print(len(re.findall("my_pattren", text)))

my_new_pat ="is"
print(re.findall(my_pattren, text))

my_new_pat2 ="i[a-z]"
print(re.findall(my_new_pat2, text))

my_new_pat3 ="\w\w"                   # https://rubular.com/
print(re.findall(my_new_pat3, text))

my_new_pat3 ="python[\d]"                   # https://rubular.com/
print(re.findall(my_new_pat3, text))

IP = "10.156.99.47"
My_patt="[\d]{1,3}\.[\d]{1,3}\.[\d]{1,3}\.[\d]{1,3}"
print(re.findall(My_patt, IP))

-------------------------------------------------------------------


'''
^  -Start of the string 
$  - End of the string 
\b - Empty sring begining or end  
\B - Empty String not at begining or end
\t \n \r -> match tab, newline, 

'''

import re

text = "This is python2 and it is easy to learn, IMlearn "
my_pattren = "\\blearn"    #\b is backspace -> \\ aovide scope
my_pattren = r"\blearn"    # alternative

print(re.findall(my_pattren, text))


-------------------------------------------------------------------

'''
{}  number of occurance

'''

import re

text = " aaafg aaahg aaaag  "             #https://rubular.com/
my_pattren = r'a{1,9}'   


print(re.findall(my_pattren, text))

-------------------------------------------------------------------
Regex Flags :

https://docs.python.org/3/library/re.html



'''
re.I  ->  Ignore case
re.M  -> Multiline

'''

import re

text = '''This is line one
this is second
this is third

'''
my_pattren = r'^this'   

print(re.findall(my_pattren, text, re.M|re.I))

-------------------------------------------------------------------


'''
Search for first match

'''

import re

text = "this is for python python1 python2 python3"
my_pattren = r'\bpython[23]?\b'

match_ob = re.search(my_pattren, text, re.M|re.I)   # get first match
if match_ob:
    print(match_ob)       #<re.Match object; span=(12, 18), match='python'>
    print(type(match_ob))    #<class 're.Match'>
    print(match_ob.group()) 

-------------------------------------------------------------------

'''
Findall and findditer 

'''

import re

text = "this is for python and have python3 and python2 "
my_pattren = r'\bpython[23]?\b'

match_ob = re.findall(my_pattren, text)  #  find all match  
print(match_ob)
print(type(match_ob))

match_ob = re.finditer(my_pattren, text)  #  find objects based on match 
print(match_ob)
print(type(match_ob))
for match in match_ob:
    print(match)
    print(match.group())
    print(match.start()) #start index
    print(match.end())

--------------------------------------------------------------------

>>> help(re.split)
Help on function split in module re:

split(pattern, string, maxsplit=0, flags=0)
    Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings.  If
    capturing parentheses are used in pattern, then the text of all
    groups in the pattern are also returned as part of the resulting
    list.  If maxsplit is nonzero, at most maxsplit splits occur,
    and the remainder of the string is returned as the final element
    of the list.

>>>
>>>
>>>
>>>
>>>
>>> print(re.split(mypat,text,flags=re.I))
['this is for ', ' and have ', '3 and ', '2 ']
>>>
>>>
>>> print(re.sub(mypat,'jython',text,flags=re.I))
this is for jython and have jython3 and jython2
>>>
>>> help(re.sub)
Help on function sub in module re:

sub(pattern, repl, string, count=0, flags=0)
    Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the Match object and must return
    a replacement string to be used.

>>>
>>> print(re.sub(mypat,'jython',text,count=1,flags=re.I))
this is for jython and have python3 and python2
>>>
>>> print(re.subn(mypat,'jython',text,count=1,flags=re.I))
('this is for jython and have python3 and python2 ', 1)
>>>
>>> print(re.subn(mypat,'jython',text,count=2,flags=re.I))
('this is for jython and have jython3 and python2 ', 2)
>>>




